===== README ======
Thanks for downloading The Computational Topology library!

This C++11 library provides a set of generic tools for:
	1) Generating point sets (coming soon)
	2) Building Neighborhood Graphs (coming soon)
	3) Building Cellular Complexes (coming soon)
	4) Computing [persistent] homology over finite fields
	5) Parallel algorithm(s) for (4)

=== LICENSE ===
CTL is BSD See LICENSE for more info. 

=== DEPENDENCIES ==
C++11 compiler (clang or gcc)
Boost
Intel's TBB
METIS (graph partitioning)
ANN (soon)

=== BUILDING ====
To build the library type:
	cmake .
Then assuming no errors occur:
	make

For OS/X Users:  
----
If you plan on using the default compiler (clang)
then when installing boost ensure that you use:
	brew install boost ---build-from-source --with-c++11 --with-mpi --with-program_options --with-clang --without-single
and after `cmake .` ensure that the compiler chosen is clang via `ccmake .` /usr/bin/c++ 
is a good choice.

Since libstdc++ (GNU C++ STL) and libc++ (Clang C++ STL) are not ABI compatible
one needs to take care to use the correct compilers for libraries linked against.
if boost is compiled with gcc, you cannot use clang to compile CTL and vice versa.


=== INSTALL === 
Fedora/CentOS/RHEL:

yum install ctl (coming soon)

Ubuntu:
apt-get install ctl (coming soon)

OS/X
brew install ctl (coming soon)

=== INSTALL (from source) ===
make install

There are no shared libraries!

==== USING (coming soon) ====
Documentation:
1) Ensure that Doxygen is installed before running ``cmake .``.
2) ``make doc``
3) Documentation is generated inside doc/doxygen/.

See /usr/share/doc/examples for a number of examples of using the library. (coming soon)
See tutorial/ for a tutorial (coming soon)

==== SUBMITTING PATCHES ====
Please Do! Accepting Pull Requests via github.

Necessary, but not sufficient conditions for patch acceptance:
1) Your code compiles.
2) You have tested and possibly optimized your code.
3) Your code is meets a style format similar to the rest of the library

=== BECOMING A MAINTAINER ===
First show some interest in the project, and submit some patches.
Once you have made some contribution then you can be accepted
as a maintainer.

In the future we hope to add support for:
	0) [Persistent] Co-homology
	1) Zig Zag Persistence
	2) Multidimensional Persistence
	3) Multidimensional Zig-Zag Persistence
	4) Tidy Sets
	5) Persistent Landscapes
	6) OpenGL Visualizations
	7) Bindings to other languages such as Python, MATLAB, and R
